<?php

namespace HelpdeskBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Symfony\Component\HttpFoundation\JsonResponse;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository
{
  public function findUsers($request){
    $unitIdFilter = ($request->query->get('userInUnit'))? $request->query->get('userInUnit') : false;
    $unitIdFilter = addslashes(htmlspecialchars($unitIdFilter));
    $isActiveFilter = (!is_null($request->query->get('isActive')))? $request->query->get('isActive') : false;
    $isActiveFilter = addslashes(htmlspecialchars($isActiveFilter));
    $and = ($unitIdFilter && $isActiveFilter != '')? 'AND ': '';
    $where = ($unitIdFilter || $isActiveFilter != '')? 'WHERE ' : '';
    $unitWhere = ($unitIdFilter)? "unit_id='".$unitIdFilter."'" : false;
    $isLockedWhere = ($isActiveFilter === '1' || $isActiveFilter === '0')? "locked=".$isActiveFilter."" : '';

    $sql = "SELECT id, username, email,  firstname, surname, unit_id, locked FROM fos_user ".$where." ". $unitWhere." ".$and." ".$isLockedWhere."";
    $stmt = $this->getEntityManager()->getConnection()->prepare($sql);
    $stmt->execute();
    $data = $stmt->fetchAll();
    $responseContainer = new JsonResponse();
    $responseContainer->setEncodingOptions(JSON_NUMERIC_CHECK);
    $responseContainer->setData(array('data'=>$data));
    $responseContainer->headers->set('Content-Type', 'application/json');
    return $responseContainer;
  }

  public function saveUser($request, $userManager){
    try{
      $content = json_decode($request->getContent(),true);
      $login = $content['login'];
      $firstName = $content['firstName'];
      $surName = $content['surName'];
      $city = (isset($content['city'])) ? $content['city']: '';
      $street = (isset($content['street'])) ? $content['street']: '';
      $postCode = (isset($content['postCode'])) ? $content['postCode']: '';
      $unit = $content['unit'];
      $email = $content['email'];
      $isActive  = (isset($content['isActive']) === true)? 1:0;

      $user = $userManager->createUser();
      $user->setUsername($login);
      $user->setFirstname($firstName);
      $user->setSurname($surName);
      $user->setEmail($email);
      $user->setCity($city);
      $user->setStreet($street);
      $user->setPostcode($postCode);
      $user->setPlainPassword('abc');
      $user->setEnabled(1);
      $user->setUnitId($unit);
      $user->setLocked($isActive);
      $duplicated = $this->getEntityManager()->getRepository('HelpdeskBundle:User')->findByUsername($login);
      if(!$duplicated){
        $userManager->updateUser($user);
      }else{
        $response['code'] = 0;
        $response['message'] = 'User exists';
      }
    }catch(Exception $e){
    }
    $response = json_encode($response);
    echo $response;
    die;
  }

  public function deleteUser($id){
    $user = $this->getEntityManager()->getRepository('HelpdeskBundle:User')->findOneById($id);
    if($user){
      try{
        $em = $this->getEntityManager();
        $em->remove($user);
        $em->flush();
        $response['code']  = 1;
      }catch(Exception $e){
      }
    }else{
      $response['code']  = 0;
    }
    $response = json_encode($response);
    echo($response);
    die;
  }

  public function updateUser($request, $userManager){
    $data = $content = json_decode($request->getContent(),true);
    $user = $this->getEntityManager()->getRepository('HelpdeskBundle:User')->findOneById($data['id']);
    if($user){
      $canEmail = $this->getEntityManager()->getRepository('HelpdeskBundle:User')->findOneByUsernameCanonical($data['username']);
      // if(!$canEmail){
      if(!$canEmail || $canEmail->getEmail() == $user->getEmail()){
        if($canEmail->getEmail()){
          
        }

        $data['islocked'] = ($data['islocked'] === true)? 1:0;
        try{
          $user->setFirstname($data['firstname']);
          $user->setSurname($data['surname']);
          $user->setEmail($data['email']);
          $user->setCity($data['city']);
          $user->setStreet($data['street']);
          $user->setPostcode($data['postcode']);
          $user->setUnitId($data['unit']);
          $user->setLocked($data['islocked']);
          $userManager->updateUser($user);
          $response['code'] = ($user->getId())? 1:0;
        }
        catch(exception $e){
        }
      }else{
        $response['code']  = 3;
      }
    }else{
      $response['code']  = 0;
    }
    $response = json_encode($response);
    echo($response);
    die;
  }
}
