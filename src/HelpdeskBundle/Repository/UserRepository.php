<?php

namespace HelpdeskBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Symfony\Component\HttpFoundation\JsonResponse;

/**
* UserRepository
*
* This class was generated by the Doctrine ORM. Add your own custom
* repository methods below.
*/
class UserRepository extends EntityRepository
{

	/**
	* Find all users ajax function
	*/
	public function findUsers($request){
		$unitIdFilter = ($request->query->get('userInUnit'))? $request->query->get('userInUnit') : false;
		$unitIdFilter = addslashes(htmlspecialchars($unitIdFilter));
		$isActiveFilter = (!is_null($request->query->get('isActive')))? $request->query->get('isActive') : false;
		$isActiveFilter = addslashes(htmlspecialchars($isActiveFilter));
		$and = ($unitIdFilter && $isActiveFilter != '')? 'AND ': '';
		$where = ($unitIdFilter || $isActiveFilter != '')? 'WHERE ' : '';
		$unitWhere = ($unitIdFilter)? "unit_id='".$unitIdFilter."'" : false;
		$isLockedWhere = ($isActiveFilter === '1' || $isActiveFilter === '0')? "locked=".$isActiveFilter."" : '';

		$sql = "SELECT id, username, email,  firstname, surname, unit_id, locked FROM fos_user ".$where." ". $unitWhere." ".$and." ".$isLockedWhere."";
		$stmt = $this->getEntityManager()->getConnection()->prepare($sql);
		$stmt->execute();
		$data = $stmt->fetchAll();
		$responseContainer = new JsonResponse();
		$responseContainer->setEncodingOptions(JSON_NUMERIC_CHECK);
		$responseContainer->setData(array('data'=>$data));
		$responseContainer->headers->set('Content-Type', 'application/json');
		return $responseContainer;
	}

	/**
	* Save one user ajax function
	*/
	public function saveUser($request, $userManager){
		try{
			$content = json_decode($request->getContent(),true);
			$login = $content['login'];
			$firstName = $content['firstName'];
			$surName = $content['surName'];
			$city = (isset($content['city'])) ? $content['city']: '';
			$street = (isset($content['street'])) ? $content['street']: '';
			$postCode = (isset($content['postCode'])) ? $content['postCode']: '';
			$unit = $content['unit'];
			$email = $content['email'];
			$isActive  = (isset($content['isActive']) === true)? 1:0;
// 			dump($isActive);
// die;
			$user = $userManager->createUser();
			$user->setUsername(addslashes(htmlspecialchars($login)));
			$user->setFirstname(addslashes(htmlspecialchars($firstName)));
			$user->setSurname(addslashes(htmlspecialchars($surName)));
			$user->setEmail(addslashes(htmlspecialchars($email)));
			$user->setCity(addslashes(htmlspecialchars($city)));
			$user->setStreet(addslashes(htmlspecialchars($street)));
			$user->setPostcode(addslashes(htmlspecialchars($postCode)));
			$user->setPlainPassword('abc');
			$user->setEnabled(1);
			$user->setUnitId(addslashes(htmlspecialchars($unit)));
			$user->setLocked(addslashes(htmlspecialchars($isActive)));
			$duplicated = $this->getEntityManager()->getRepository('HelpdeskBundle:User')->findByUsername($login);
			if(!$duplicated){
				$response['code'] = 1;
				$userManager->updateUser($user);
			}else{
				$response['code'] = 0;
				$response['message'] = 'User exists';
			}
		}catch(Exception $e){
		}
		$response = json_encode($response);
		echo $response;
		die;
	}

	/**
	* Delete one user ajax function
	*/
	public function deleteUser($id){
		$user = $this->getEntityManager()->getRepository('HelpdeskBundle:User')->findOneById(addslashes(htmlspecialchars($id)));
		if($user){
			try{
				$em = $this->getEntityManager();
				$em->remove($user);
				$em->flush();
				$response['code']  = 1;
			}catch(Exception $e){
			}
		}else{
			$response['code']  = 0;
		}
		$response = json_encode($response);
		echo($response);
		die;
	}

	/**
	* Update one user ajax function
	*/
	public function updateUser($request, $userManager){
		$data = $content = json_decode($request->getContent(),true);
		$user = $this->getEntityManager()->getRepository('HelpdeskBundle:User')->findOneById(addslashes(htmlspecialchars($data['id'])));
		if($user){
			$canEmail = $this->getEntityManager()->getRepository('HelpdeskBundle:User')->findOneByUsernameCanonical(addslashes(htmlspecialchars($data['username'])));
			// if(!$canEmail){
			if(!$canEmail || $canEmail->getEmail() == $user->getEmail()){
				if($canEmail->getEmail()){

				}

				$data['islocked'] = ($data['islocked'] === true)? 1:0;
				try{
					$user->setFirstname(addslashes(htmlspecialchars($data['firstname'])));
					$user->setSurname(addslashes(htmlspecialchars($data['surname'])));
					$user->setEmail(addslashes(htmlspecialchars($data['email'])));
					$user->setCity(addslashes(htmlspecialchars($data['city'])));
					$user->setStreet(addslashes(htmlspecialchars($data['street'])));
					$user->setPostcode(addslashes(htmlspecialchars($data['postcode'])));
					$user->setUnitId(addslashes(htmlspecialchars($data['unit'])));
					$user->setLocked(addslashes(htmlspecialchars($data['islocked'])));
					$userManager->updateUser($user);
					$response['code'] = ($user->getId())? 1:0;
				}
				catch(exception $e){
				}
			}else{
				$response['code']  = 3;
			}
		}else{
			$response['code']  = 0;
		}
		$response = json_encode($response);
		echo($response);
		die;
	}


}
